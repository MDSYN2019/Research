--------------------
MPI Send and Receive
--------------------

Sending and receiving are the two foundational concepts of MPI. Almost every single function in MPI can be
implemented with basic send and recieve calls. In this lesson, I will discuss how to use MPI's blocking
sending and receiving functions, and I will also overview other basic concepts associated with transmitting
data using MPI.

MPI's send and recieve calls operate in the following manner. First, process A decides a message needs
to be sent to process B. Process A then packs up all of its necessary data into a buffer for process B.
These buffers are often referred to as envelopes since the data is being packed into a single message
before transmission.

Even though the message is routed to B, prorcess B still has to acknowledge that it wants to receive
A's data. Once it does this, the data has been tramsmitted. Process A is acknowledged that
the data has been trasmistted and may go back to work.

Sometimes there are cases when A might have to send many different types of messages to B. Instead of B
having to go through extra measures to diffrentiate all these messages, MPI allows senders to also specify
message IDs with the message (known as tags). When process B only requests a message with a certain tag number,
messages with different tags will be buffered by the network until B is ready for them.


With these concepts in mind, let's look at the prototypes for MPI sending and receiving functions

------------------------------------------------------------------------------------------------------------
=> MPI_Send(void* data, int count, MPI_Datatype datatype, int destination, int tag, MPI_Comm communicator)

=> MPI_Recv(void* data, int count, MPI_Datatype datatype, int tag, MPI_Comm communicator, MPI_Status* status)
------------------------------------------------------------------------------------------------------------

Although this might eem like a mouthful when reading all of the arguments, they become
easier to rememebr since almost every MPI call uses similar syntax. The first argument is the data buffer.
The second and third arguments describe the count and type of elements that reside in the buffer. MPI_send sends
the exact count of elements, and MPU_Recv will receive at most the count of elements.

The fourth and fifth arguments specify the rank of sending/receiving process and the tag of the message. 

------------------------
Collective Communication
------------------------





