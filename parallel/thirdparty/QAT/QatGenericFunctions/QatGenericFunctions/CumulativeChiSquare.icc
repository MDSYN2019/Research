//---------------------------------------------------------------------------//
// !!                                                                     !! //
//                                                                           //
//  Copyright (C) 2016 Joe Boudreau                                          //
//                                                                           //
//  This file is part of the QAT Toolkit for computational science           //
//                                                                           //
//  QAT is free software: you can redistribute it and/or modify              //
//  it under the terms of the GNU Lesser General Public License as           //
//  published by the Free Software Foundation, either version 3 of           //
//  the License, or (at your option) any later version.                      //
//                                                                           //
//  QAT is distributed in the hope that it will be useful,                   //
//  but WITHOUT ANY WARRANTY; without even the implied warranty of           //
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            //
//  GNU Lesser General Public License for more details.                      //
//                                                                           //
//  You should have received a copy of the GNU Lesser General Public         //
//  License along with QAT.  If not, see <http://www.gnu.org/licenses/>.     //
//                                                                           //
//---------------------------------------------------------------------------//

#include "QatGenericFunctions/CumulativeChiSquare.h"
#include "QatGenericFunctions/IncompleteGamma.h"
#include "QatGenericFunctions/Variable.h"

namespace Genfun {
FUNCTION_OBJECT_IMP_INLINE(CumulativeChiSquare)

//---------------------------------------------------------------------------------//
// Implementation notes:  The Cumulative Chi Square function is implemented in     //
// terms of the incomplete gamma function.                                         //
//---------------------------------------------------------------------------------//
inline
CumulativeChiSquare::CumulativeChiSquare(unsigned int ndf):
AbsFunction(),
  _nDof(ndf)
{
  create();
}

inline
CumulativeChiSquare::~CumulativeChiSquare() {
  delete _function;
}

inline
CumulativeChiSquare::CumulativeChiSquare(const CumulativeChiSquare & right):
AbsFunction(right),
_nDof(right._nDof)
{
  create();
}

inline
double CumulativeChiSquare::operator() (double x) const {
  return (*_function)(x);
}

inline
unsigned int CumulativeChiSquare::nDof() const {
  return _nDof;
}

inline
void CumulativeChiSquare::create() {
  Variable x;
  IncompleteGamma incompleteGamma(IncompleteGamma::P);
  incompleteGamma.a().setValue(_nDof/2.0);
  _function = (incompleteGamma(x/2.0)).clone();
} 
} // namespace Genfun
