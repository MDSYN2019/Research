//---------------------------------------------------------------------------//
// !!                                                                     !! //
//                                                                           //
//  Copyright (C) 2016 Joe Boudreau                                          //
//                                                                           //
//  This file is part of the QAT Toolkit for computational science           //
//                                                                           //
//  QAT is free software: you can redistribute it and/or modify              //
//  it under the terms of the GNU Lesser General Public License as           //
//  published by the Free Software Foundation, either version 3 of           //
//  the License, or (at your option) any later version.                      //
//                                                                           //
//  QAT is distributed in the hope that it will be useful,                   //
//  but WITHOUT ANY WARRANTY; without even the implied warranty of           //
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            //
//  GNU Lesser General Public License for more details.                      //
//                                                                           //
//  You should have received a copy of the GNU Lesser General Public         //
//  License along with QAT.  If not, see <http://www.gnu.org/licenses/>.     //
//                                                                           //
//---------------------------------------------------------------------------//

#include "QatPlotting/LinToLog.h"
#include "QatPlotting/AbsPlotter.h"
#include "QatDataAnalysis/Query.h"
#include "QatGenericFunctions/AbsFunction.h"
#include <QGraphicsPathItem>
#include <QPainterPath>
#include <QGraphicsScene>
#include <stdexcept>

class PlotFunction1D::Clockwork {

public:

  Clockwork() :
    function(NULL),
    domainRestriction(NULL),
    myProperties(NULL) {}

  ~Clockwork() {
    delete domainRestriction;
    delete function;
  }

  static bool intersect(const QRectF * rect, const QPointF & p1, const QPointF & p2, QPointF & p) {

    double min=rect->top();
    double max=rect->bottom();
    double y1=p1.y();
    double y2=p2.y();

    if (rect->contains(p1) && rect->contains(p2)) {
      return false;
    }
    else if (y1 < min || y2 < min) {
      if (QLineF(p1,p2).intersect(QLineF(rect->topLeft(),rect->topRight()),&p)!=QLineF::BoundedIntersection){
	return false;
      }
    }
    else if (y1 > max || y2 > max) {
      if (QLineF(p1,p2).intersect(QLineF(rect->bottomLeft(),rect->bottomRight()),&p)!=QLineF::BoundedIntersection){
	return false;
      }
    }
    return true;
  }

  static bool maxOut(const QRectF * rect, const QPointF & p1, QPointF & p) {

    double min=rect->top();
    double max=rect->bottom();
    double y1=p1.y();

    if (rect->contains(p1)) {
      if (fabs(y1-max) < fabs(y1-min)) {
	p.setX(p1.x());
	p.setY(max);
      }
      else {
	p.setX(p1.x());
	p.setY(min);
      }
    }
    else {
      
      if (y1>max) {
	p.setX(p1.x());
	p.setY(max);
      }
      else if (y1<min) {
	p.setX(p1.x());
	p.setY(min);
      }
    }

    return true;
  }

  static void moveTo(QPainterPath *path, const QMatrix & m, const QPointF & p, const LinToLog *linToLogX=NULL, const LinToLog *linToLogY=NULL) {
    double x=p.x(),y=p.y();
    if (linToLogX) x = (*linToLogX)(x);
    if (linToLogY) y = (*linToLogY)(y);
    
    path->moveTo(m.map(QPointF(x,y)));
  }

  static void lineTo(QPainterPath *path, const QMatrix & m, const QPointF & p, const LinToLog *linToLogX=NULL, const LinToLog *linToLogY=NULL) {
    double x=p.x(),y=p.y();
    if (linToLogX) x = (*linToLogX)(x);
    if (linToLogY) y = (*linToLogY)(y);
    
    path->lineTo(m.map(QPointF(x,y)));
  }

  // This is state:
  const Genfun::AbsFunction            *function;           // The function
  QRectF                                rect;               // The "natural" bounding rectangle
  const Cut<double>                    *domainRestriction;  // Domain restrictions.
  Properties                           *myProperties;       // My properties.  May 
  Properties                            defaultProperties;

};
